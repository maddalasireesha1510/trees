class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) 
    {
    bool flag=true;
    stack<TreeNode*>st;
    stack<TreeNode*>sta;
    vector<int>ans;
    vector<int>ans1;
    if(p==NULL || q==NULL)
    {
        if(p==q)
            return true;
        else
            return false;
    }
    st.push(p);
    while(!st.empty())
    {
        TreeNode* Node=st.top();
        st.pop();
        
        ans.push_back(Node->val);
        if(Node->right)
        {
            st.push(Node->right);
        }
        else if(!Node->right)
        {
            ans.push_back(-1);
        }
        
        if(Node->left)
        {
            st.push(Node->left);
        }
        else if(!Node->left)
        {
            ans.push_back(-2);
        }
    }
        
    sta.push(q);
    while(!sta.empty())
    {
        TreeNode* Node=sta.top();
        sta.pop();
        ans1.push_back(Node->val);
        if(Node->right)
        {
            sta.push(Node->right);
        }
        else if(!Node->right)
        {
            ans1.push_back(-1);
        }
        if(Node->left)
        {
            sta.push(Node->left);
        }
        else if(!Node->left)
        {
            ans1.push_back(-2);
        }
        
    }
        
        for(auto it:ans1)
        {
            cout<<it<<"\n";
        }
        return ans==ans1;
        for(int i=0;i<ans.size();i++)
        {
                if(ans[i]==ans1[j])
                {
                    flag=true;
                }
                else{
                    flag=false;
                }
        }
        
        return flag;
    }
};
